{"version":3,"file":"static/js/343.e4ff9e97.chunk.js","mappings":"gSAYMA,EAAa,CACfC,kBAAmB,CACjBC,WAAY,CAAEC,IAAK,IAAMC,IAAK,KAC9BC,MAAO,IAETC,QAAS,CACPJ,WAAY,CAAEC,IAAK,IAAMC,IAAK,MAC9BC,MAAO,GAETE,YAAa,CACXL,WAAY,CAAEC,IAAI,KAAOC,IAAK,MAC9BC,MAAO,GAETG,iBAAkB,CAChBN,WAAY,CAAEC,IAAI,KAAOC,IAAK,MAC9BC,MAAO,GAETI,OAAQ,CACNP,WAAY,CAAEC,IAAK,KAAMC,IAAK,KAC9BC,MAAO,GAETK,YAAa,CACTR,WAAY,CAAEC,IAAK,IAAKC,IAAK,KAC7BC,MAAO,GAEXM,iBAAkB,CACdT,WAAY,CAAEC,IAAK,IAAKC,IAAK,KAC7BC,MAAO,GAEXO,OAAQ,CACNV,WAAY,CAAEC,IAAK,IAAKC,IAAK,GAC7BC,MAAO,IAGb,SAASQ,EAAkBC,GACvB,IACAC,GAAuBC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5BI,EAAIF,EAAA,GAACG,EAAOH,EAAA,GACbI,GAAoBC,EAAAA,EAAAA,QAAO,MAC3BC,GAAeD,EAAAA,EAAAA,QAAO,IAAKC,EAAaC,QAAU,IAC5CC,EAAAA,EAAAA,KAAa,SAACC,GAAK,OAAKA,EAAMC,IAAIC,aAAa,IAA3D,IACAC,GAAiCb,EAAAA,EAAAA,WAAS,GAAMc,GAAAZ,EAAAA,EAAAA,GAAAW,EAAA,GAAzCE,EAASD,EAAA,GAACE,EAAYF,EAAA,GACvBG,GAAWC,EAAAA,EAAAA,OACjBC,EAAAA,EAAAA,YAAW,WACP,IAAMC,EAAkB,IAAIC,gBACtBC,EAAM,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACYC,EAAAA,EAAAA,IAAU,uDAADC,OAV5B,mCAU0F,iBAAAA,OAAgBpC,EAAKqC,IAClH,CAAEC,OAAOhB,EAAgBgB,SAAS,OAD7BR,EAAQE,EAAAO,KAEdjC,EAAQwB,EAASzB,KAAKmC,SAAU,wBAAAR,EAAAS,OAAA,GAAAZ,EAAA,KACnC,kBAJW,OAAAJ,EAAAiB,MAAA,KAAAC,UAAA,KAIRzB,GAAa,GAAQM,IAAYN,GAAa,EACtD,GAAE,IACF,IAYM0B,EAAW,SAACC,GACXA,IAAOpC,EAAaC,QAAQoC,SAASD,IAAKpC,EAAaC,QAAQqC,KAAKF,GACnEpC,EAAaC,QAAQsC,SAAW3C,EAAK2C,QAbzCvC,EAAaC,QAAQuC,SAAS,SAACC,EAAQC,GACnCD,EAAQE,iBAAiB,aAAa,SAACC,GACtBH,EAAQI,cAAc,iCAC5BC,UAAUC,OAAO,kBAC5B,IACAN,EAAQE,iBAAiB,YAAY,SAACC,GACrBH,EAAQI,cAAc,iCAC5BC,UAAUE,IAAI,kBACzB,GACJ,GAKJ,EA4BA,OAAOC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAAAC,SAAA,CACV3C,IAAa4C,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACtBJ,EAAAA,EAAAA,MAACK,EAAAA,EAAa,CAACC,UAAU,UAAUC,eAAe,OAAML,SAAA,EACxDC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,+BAA8BN,UACzCC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,yBAAwBN,SAAE5D,EAAKmE,UAAU,SAAWN,KADpB7D,EAAKqC,KAGxDwB,EAAAA,EAAAA,KAACO,EAAAA,QAAQ,CAAClF,WAAYA,EAAYmF,eAAe,QAAQC,IAAK/D,EAAkBqD,SAC1EvD,EAjCCA,EAAKkE,KAAK,SAACC,EAAKrB,GACnB,IAAIsB,EAASD,EAAKE,YAClB,OAAOhB,EAAAA,EAAAA,MAAA,OAAeQ,UAAU,yBAAyBI,IAAK1B,EAASgB,SAAA,EACnEC,EAAAA,EAAAA,KAAA,OAAKc,IAAG,mCAAAvC,OAAqCqC,GAAUG,IAAI,MAC3DlB,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,+CAA8CN,SAAA,EACzDC,EAAAA,EAAAA,KAAA,OAAKK,UAAU,mCAAkCN,SAAEY,EAAKK,kBACxDnB,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,uBAAqBY,EAAKM,aAAa,KAACjB,EAAAA,EAAAA,KAACkB,EAAAA,EAAY,QAC3DrB,EAAAA,EAAAA,MAAA,OAAKQ,UAAU,sCAAqCN,SAAA,EACpDC,EAAAA,EAAAA,KAACmB,EAAAA,GAAM,CAACC,OAAK,EAACC,KAAK,UAAStB,UAACC,EAAAA,EAAAA,KAAA,KAAGK,UAAU,+BAA8BN,SAAC,mBACzEC,EAAAA,EAAAA,KAACmB,EAAAA,GAAM,CAACC,OAAK,EAACC,KAAK,UAAUC,QAAU,SAAC9B,GACpClC,GAASiE,EAAAA,EAAAA,IAAc,CACnBC,QAAQb,EAAKc,GACbC,UAAUf,EAAKK,eACfW,WAAWhB,EAAKiB,UAChBC,UAAU,CAAC,CAACC,YAAYnB,EAAKM,cAAc,CAACc,UAAUpB,EAAKqB,aAC3DC,WAAWtB,EAAKE,YAChBqB,gBAAgBvB,EAAKwB,WACrBC,aAAazB,EAAK0B,aAClBC,cAAc3B,EAAK4B,kBACnBC,aAAa7B,EAAK8B,MAAMC,aAEhC,EAAE3C,UAACC,EAAAA,EAAAA,KAAA,KAAGK,UAAU,+BAA8BN,SAAC,4BAnBtCT,EAsBrB,IASiC,YAIzC,CAEA,OAAeqD,EAAAA,EAAAA,MAAKzG,E","sources":["component/Home/HomeNFbodyContent.jsx"],"sourcesContent":["import { Fragment, memo, useEffect, useRef, useState } from \"react\" ;\r\nimport \"./HomeNFbodyContent.css\" ;\r\nimport axios from \"axios\" ;\r\nimport Carousel from \"react-multi-carousel\";\r\nimport \"react-multi-carousel/lib/styles.css\";\r\nimport { StarOutlined } from \"@ant-design/icons\" ;\r\nimport { Button } from \"antd\";\r\nimport { addIntoMyList } from \"../../features/counter/getAPI\";\r\nimport { useSelector , useDispatch } from \"react-redux\";\r\nimport Skeleton , { SkeletonTheme } from 'react-loading-skeleton';\r\nimport React from \"react\" ;\r\nimport Loader from \"./loader\";\r\nconst responsive = {\r\n    superLargeDesktop: {\r\n      breakpoint: { max: 4000, min: 3000 },\r\n      items: 10\r\n    },\r\n    desktop: {\r\n      breakpoint: { max: 3000, min: 1513 },\r\n      items: 7  \r\n    },\r\n    smallDestop: {\r\n      breakpoint: { max:1513 , min: 1229 } ,\r\n      items: 6 \r\n    },\r\n    superSmallDestop: {\r\n      breakpoint: { max:1229 , min: 1083 } ,\r\n      items: 5\r\n    },\r\n    tablet: {\r\n      breakpoint: { max: 1083, min: 464 },\r\n      items: 4\r\n    },\r\n    smallTablet: {\r\n        breakpoint: { max: 898, min: 640 } ,\r\n        items: 3\r\n    },\r\n    extraSmallTablet: {\r\n        breakpoint: { max: 640, min: 464 } ,\r\n        items: 2\r\n    },\r\n    mobile: {\r\n      breakpoint: { max: 464, min: 0 },\r\n      items: 1\r\n    }\r\n};\r\nfunction HomeNFbodyContent(item) {\r\n    const APIkey = `8487dd7f765e35a7fcac553fcc1d84db` ; \r\n    const [data,setData] = useState([]) ;\r\n    const refImageContainer = useRef(null) ;\r\n    const listItemsRef = useRef([]); listItemsRef.current = [] ;\r\n    const res = useSelector( (state) => state.api.favouriteFilm) ;\r\n    const [isLoading,SetIsLoading] = useState(false) ;\r\n    const dispatch = useDispatch() ;\r\n    useEffect( () => {\r\n        const abortController = new AbortController ;\r\n        const getAPI = async () => {\r\n            const response = await axios.get(`https://api.themoviedb.org/3/discover/movie?api_key=${APIkey}&with_genres=${item.Id}`\r\n            ,{ signal:abortController.signal }) ; \r\n            setData(response.data.results) ; \r\n        } ; SetIsLoading(true) ; getAPI() ;  SetIsLoading(false) ;\r\n    },[])\r\n    const addEventListenerToRef = () => {\r\n        listItemsRef.current.forEach( (element,pos) => {\r\n            element.addEventListener(\"mouseover\", (e) => {\r\n                let target = element.querySelector(\".HomeNFbodyContentImageDetail\") ;\r\n                target.classList.remove(\"translateY300px\") ;    \r\n            })\r\n            element.addEventListener(\"mouseout\", (e) => {\r\n                let target = element.querySelector(\".HomeNFbodyContentImageDetail\") ;\r\n                target.classList.add(\"translateY300px\") ;\r\n            })\r\n        })\r\n    }\r\n    const addToRef = (el) => {\r\n        if(el && !listItemsRef.current.includes(el)) listItemsRef.current.push(el) ;\r\n        if( listItemsRef.current.length === data.length ) addEventListenerToRef() ;\r\n    } \r\n    function ExportDataImage() {\r\n        return data.map( (film,pos)  => {\r\n            let imgAPI = film.poster_path ;\r\n            return <div key={pos} className=\"HomeNFbodyContentImage\" ref={addToRef}>\r\n                <img src={`https://image.tmdb.org/t/p/w200/${imgAPI}`} alt=\"\"/>\r\n                <div className=\"HomeNFbodyContentImageDetail translateY300px\">\r\n                    <div className=\"HomeNFbodyContentImageDetailText\">{film.original_title}</div> \r\n                    <span>With vote average : {film.vote_average} <StarOutlined /></span>   \r\n                    <div className=\"HomeNFbodyContentImageButtonWrapper\">\r\n                    <Button ghost type=\"primary\"><p className=\"HomeNFbodyContentImageButton\">Watch Movie</p></Button>\r\n                    <Button ghost type=\"primary\" onClick={ (e) => {\r\n                        dispatch(addIntoMyList({\r\n                            movieID:film.id ,\r\n                            movieName:film.original_title ,\r\n                            movieGenre:film.genre_ids ,\r\n                            movieRate:[{voteAverage:film.vote_average},{voteCount:film.vote_count}] ,\r\n                            movieImage:film.poster_path ,\r\n                            moviePopularity:film.popularity ,\r\n                            movieRelease:film.release_date ,\r\n                            movieLanguage:film.original_language ,\r\n                            movieIsAdult:film.adult.toString() ,\r\n                        })) \r\n                    }}><p className=\"HomeNFbodyContentImageButton\">Add to MyList</p></Button></div>\r\n                </div>\r\n            </div>\r\n        })\r\n    }   \r\n    return <Fragment>\r\n        { isLoading && <Loader />}\r\n        <SkeletonTheme baseColor=\"#202020\" highlightColor=\"#444\"> \r\n        <div className=\"HomeNFbodyContentWrapperFilm\" key={item.Id}>\r\n            <div className=\"HomeNFBodyContentTitle\">{item.nameGenre+\" Film\" || <Skeleton/>}</div> \r\n        </div> \r\n        <Carousel responsive={responsive} containerClass=\"hello\" ref={refImageContainer} >  \r\n            { data ? ExportDataImage() : null }\r\n        </Carousel>   \r\n        </SkeletonTheme>\r\n    </Fragment>\r\n}\r\n\r\nexport default memo(HomeNFbodyContent) ; \r\n\r\n"],"names":["responsive","superLargeDesktop","breakpoint","max","min","items","desktop","smallDestop","superSmallDestop","tablet","smallTablet","extraSmallTablet","mobile","HomeNFbodyContent","item","_useState","useState","_useState2","_slicedToArray","data","setData","refImageContainer","useRef","listItemsRef","current","useSelector","state","api","favouriteFilm","_useState3","_useState4","isLoading","SetIsLoading","dispatch","useDispatch","useEffect","abortController","AbortController","getAPI","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","response","wrap","_context","prev","next","axios","concat","Id","signal","sent","results","stop","apply","arguments","addToRef","el","includes","push","length","forEach","element","pos","addEventListener","e","querySelector","classList","remove","add","_jsxs","Fragment","children","_jsx","Loader","SkeletonTheme","baseColor","highlightColor","className","nameGenre","Carousel","containerClass","ref","map","film","imgAPI","poster_path","src","alt","original_title","vote_average","StarOutlined","Button","ghost","type","onClick","addIntoMyList","movieID","id","movieName","movieGenre","genre_ids","movieRate","voteAverage","voteCount","vote_count","movieImage","moviePopularity","popularity","movieRelease","release_date","movieLanguage","original_language","movieIsAdult","adult","toString","memo"],"sourceRoot":""}